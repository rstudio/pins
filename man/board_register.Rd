% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/legacy_board_registry.R,
%   R/legacy_pin_registry.R
\name{board_register}
\alias{board_register}
\alias{board_register_azure}
\alias{board_register_datatxt}
\alias{board_register_dospace}
\alias{board_register_gcloud}
\alias{board_register_github}
\alias{board_register_local}
\alias{board_register_kaggle}
\alias{board_register_rsconnect}
\alias{board_register_s3}
\alias{board_deregister}
\alias{board_default}
\alias{board_list}
\alias{board_get}
\title{Board registry}
\usage{
board_register(
  board,
  name = NULL,
  cache = board_cache_path(name),
  versions = NULL,
  ...
)

board_register_azure(
  name = "azure",
  container = Sys.getenv("AZURE_STORAGE_CONTAINER"),
  account = Sys.getenv("AZURE_STORAGE_ACCOUNT"),
  key = Sys.getenv("AZURE_STORAGE_KEY"),
  cache = board_cache_path(name),
  path = NULL,
  ...
)

board_register_datatxt(
  url,
  name = NULL,
  headers = NULL,
  cache = board_cache_path(name),
  ...
)

board_register_dospace(
  name = "dospace",
  space = Sys.getenv("DO_SPACE"),
  key = Sys.getenv("DO_ACCESS_KEY_ID"),
  secret = Sys.getenv("DO_SECRET_ACCESS_KEY"),
  datacenter = Sys.getenv("DO_DATACENTER"),
  cache = board_cache_path(name),
  host = "digitaloceanspaces.com",
  path = NULL,
  ...
)

board_register_gcloud(
  name = "gcloud",
  bucket = Sys.getenv("GCLOUD_STORAGE_BUCKET"),
  token = NULL,
  cache = board_cache_path(name),
  path = NULL,
  ...
)

board_register_github(
  name = "github",
  repo = NULL,
  branch = NULL,
  token = NULL,
  path = "",
  host = "https://api.github.com",
  cache = board_cache_path(name),
  ...
)

board_register_local(name = "local", cache = board_cache_path(name), ...)

board_register_kaggle(
  name = "kaggle",
  token = NULL,
  cache = board_cache_path(name),
  ...
)

board_register_rsconnect(
  name = "rsconnect",
  server = NULL,
  account = NULL,
  key = NULL,
  output_files = FALSE,
  cache = board_cache_path(name),
  ...
)

board_register_s3(
  name = "s3",
  bucket = Sys.getenv("AWS_BUCKET"),
  key = Sys.getenv("AWS_ACCESS_KEY_ID"),
  secret = Sys.getenv("AWS_SECRET_ACCESS_KEY"),
  cache = board_cache_path(name),
  host = "s3.amazonaws.com",
  region = NULL,
  path = NULL,
  ...
)

board_deregister(name, ...)

board_default()

board_list()

board_get(name)

board_register(
  board,
  name = NULL,
  cache = board_cache_path(name),
  versions = NULL,
  ...
)

board_register_azure(
  name = "azure",
  container = Sys.getenv("AZURE_STORAGE_CONTAINER"),
  account = Sys.getenv("AZURE_STORAGE_ACCOUNT"),
  key = Sys.getenv("AZURE_STORAGE_KEY"),
  cache = board_cache_path(name),
  path = NULL,
  ...
)

board_register_datatxt(
  url,
  name = NULL,
  headers = NULL,
  cache = board_cache_path(name),
  ...
)

board_register_dospace(
  name = "dospace",
  space = Sys.getenv("DO_SPACE"),
  key = Sys.getenv("DO_ACCESS_KEY_ID"),
  secret = Sys.getenv("DO_SECRET_ACCESS_KEY"),
  datacenter = Sys.getenv("DO_DATACENTER"),
  cache = board_cache_path(name),
  host = "digitaloceanspaces.com",
  path = NULL,
  ...
)

board_register_gcloud(
  name = "gcloud",
  bucket = Sys.getenv("GCLOUD_STORAGE_BUCKET"),
  token = NULL,
  cache = board_cache_path(name),
  path = NULL,
  ...
)

board_register_github(
  name = "github",
  repo = NULL,
  branch = NULL,
  token = NULL,
  path = "",
  host = "https://api.github.com",
  cache = board_cache_path(name),
  ...
)

board_register_local(name = "local", cache = board_cache_path(name), ...)

board_register_kaggle(
  name = "kaggle",
  token = NULL,
  cache = board_cache_path(name),
  ...
)

board_register_rsconnect(
  name = "rsconnect",
  server = NULL,
  account = NULL,
  key = NULL,
  output_files = FALSE,
  cache = board_cache_path(name),
  ...
)

board_register_s3(
  name = "s3",
  bucket = Sys.getenv("AWS_BUCKET"),
  key = Sys.getenv("AWS_ACCESS_KEY_ID"),
  secret = Sys.getenv("AWS_SECRET_ACCESS_KEY"),
  cache = board_cache_path(name),
  host = "s3.amazonaws.com",
  region = NULL,
  path = NULL,
  ...
)

board_deregister(name, ...)

board_default()

board_list()

board_get(name)
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#deprecated}{\figure{lifecycle-deprecated.svg}{options: alt='[Deprecated]'}}}{\strong{[Deprecated]}}

Prior to pins 1.0.0, boards were managed using a named registry. Functions
like \code{\link[=pin]{pin()}}, \code{\link[=pin_get]{pin_get()}}, \code{\link[=pin_info]{pin_info()}} take the board as the \strong{second}
argument, using \code{\link[=legacy_local]{legacy_local()}} if the board was not explicitly specified.

Now we recommend using the new pins API, where you explicitly create a
board using using \code{\link[=board_local]{board_local()}}, \code{\link[=board_rsconnect]{board_rsconnect()}}, and friends, and
supply it to the \strong{first} argument of \code{\link[=pin_read]{pin_read()}}, \code{\link[=pin_write]{pin_write()}}, and
\code{\link[=pin_meta]{pin_meta()}}.

\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#deprecated}{\figure{lifecycle-deprecated.svg}{options: alt='[Deprecated]'}}}{\strong{[Deprecated]}}

Prior to pins 1.0.0, boards were managed using a named registry. Functions
like \code{\link[=pin]{pin()}}, \code{\link[=pin_get]{pin_get()}}, \code{\link[=pin_info]{pin_info()}} take the board as the \strong{second}
argument, using \code{\link[=legacy_local]{legacy_local()}} if the board was not explicitly specified.

Now we recommend using the new pins API, where you explicitly create a
board using using \code{\link[=board_local]{board_local()}}, \code{\link[=board_rsconnect]{board_rsconnect()}}, and friends, and
supply it to the \strong{first} argument of \code{\link[=pin_read]{pin_read()}}, \code{\link[=pin_write]{pin_write()}}, and
\code{\link[=pin_meta]{pin_meta()}}.
}
\examples{
# old API
board_register_local("myboard", cache = tempfile())
pin(mtcars, board = "myboard")
pin_get("mtcars", board = "myboard")

# new API
board <- board_temp()
board \%>\% pin_write(mtcars)
board \%>\% pin_read("mtcars")
# old API
board_register_local("myboard", cache = tempfile())
pin(mtcars, board = "myboard")
pin_get("mtcars", board = "myboard")

# new API
board <- board_temp()
board \%>\% pin_write(mtcars)
board \%>\% pin_read("mtcars")
}
\keyword{internal}
